=AlgoIdeas=

function addUpTo(n) {
  let total = 0;
  for (let i = 0; i <= n; i++) {
    total += i;
  }
  return total;
  // return n * (n+1) / 2
}

console.log(addUpTo(5));

=AlgorismTopics=
# Array #
* BigPicture *
const strings = ["a", "b", "c", "d"];
// Lookup O(1)
// Delete O(n)
strings.pop(); //delete last item of array

// Insert O(n)
strings.unshift("x"); // O(n) Add 'x' in beginnings of array and shift all item's index #

// Push O(1) like .append
// .splice(i#, deleteQty, insertString); O(n)
strings.splice(2, 0, "x"); // [ 'a', 'b', 'x', 'c', 'd' ]

console.log(strings);

* mergeStoredArrays *
function mergeSortedArrays(array1, array2) {
  const mergedArray = [];
  let array1Item = array1[0];
  let array2Item = array2[0];
  let i = 1;
  let j = 1;

  if (array1.length === 0) {
    return array2;
  }
  if (array2.length === 0) {
    return array1;
  }

  while (array1Item || array2Item) {
    // !array2Item: 31 will go in
    if (!array2Item || array1Item < array2Item) {
      mergedArray.push(array1Item);
      array1Item = array1[i];
      i++;
    } else {
      mergedArray.push(array2Item);
      array2Item = array2[j];
      j++;
    }
  }
  return mergedArray;
}
console.log(mergeSortedArrays([0, 3, 4, 31], [4, 6, 30]));
// [0, 3, 4, 4 ,6, 30, 31]

function mergeSortedArrays2(array1, array2) {
  let retArray = [];
  const sortedArray = [];

  if (array1.length === 0) {
    return array2;
  }
  if (array2.length === 0) {
    return array1;
  }

  for (num of array1) {
    retArray.push(num);
  }
  for (num of array2) {
    retArray.push(num);
  }

  return retArray.sort("number");
}
// console.log(mergeSortedArrays([0, 3, 4, 31], [4, 6, 30]));
// [0, 3, 4, 4 ,6, 30, 31]

* myArrayClass *
// method: Function in class. ex: myArray.pop()

class MyArray {
  constructor() {
    this.length = 0;
    this.data = {};
  }
  get(index) {
    return this.data[index];
  }
  push(item) {
    // Add new item in the end of index
    this.data[this.length] = item;
    this.length++;
    return this.length;
  }
  pop() {
    const lastItem = this.data[this.length - 1];
    delete this.data[this.length - 1];
    this.length--;
    return lastItem;
  }
  delete(index) {
    const item = this.data[index];
    this.shiftItems(index);
    return item;
  }
  shiftItems(index) {
    for (let i = index; i < this.length - 1; i++) {
      this.data[i] = this.data[i + 1];
    }
    delete this.data[this.length - 1];
    this.length--;
  }
}

const newArray = new MyArray();
newArray.push("hi");
newArray.push("you");
newArray.push("!!");
// newArray.pop();
// newArray.pop();
newArray.delete(0);
newArray.push("are");
newArray.push("nice");
newArray.delete(1);
console.log(newArray);

* returnString *
function reverse(str) {
  // Error checking
  if (!str || str.length < 2 || typeof str !== "string") {
    return "Please type strings";
  }

  const revString = str
    .split("")
    .reverse()
    .join("");
  return revString;
}

function reverse2(str) {
  const strings = str.split("");
  let revString = "";

  for (let char of strings) {
    revString = char + revString;
  }

  return revString;
}

function reverse3(str) {
  const backWords = [];
  const totalItems = str.length - 1;
  for (let i = totalItems; i >= 0; i--) {
    backWords.push(str[i]);
  }
  return backWords.join("");
}

console.log(reverse("Hi My name is Roy"));
console.log("Error:", reverse(123));
console.log(reverse2("Hi My name is Roy"));
console.log(reverse3("Hi My name is NYAN"));

// for ( let i in array) -> i = index#
// for (let c of array) -> c = char

// for (let char in strings) {
//   revString = strings[char] + revString;
// }

=HashTables=

* containsCommonItem *
// Give 2 arrays
// check if there is same value
// return true / false

// array1 ===> obj{
//   a: true,
//   b: true,
//   c: true
// }

const array1 = ["a", "b", "c", "x"];
const array2 = ["d", "b", "z"];

function containsCommonItem(array1, array2) {
  let map = {};
  for (let char of array1) {
    if (!map[char]) {
      map[char] = true;
    }
  }
  for (let char of array2) {
    if (map[char] === true) {
      return true;
    }
  }
  return false;
}

function findSameWord2(array1, array2) {
  for (let i in array1) {
    for (let j in array2) {
      if (array1[i] === array2[j]) {
        return true;
      }
    }
  }
  return false;
}

console.log(containsCommonItem(array1, array2));
// console.log(findSameWord2(array1, array2));

*hasPairWithSum*
const array1 = [6, 4, 3, 2, 1, 7];

function hasPairWithSum(arr, sum) {
  // make object to use `has`
  const targetSet = new Set();

  for (let i = 0; i < arr.length; i++) {
    if (targetSet.has(arr[i])) {
      console.log(targetSet);
      return true;
      // return [arr.indexOf(sum - arr[i]), i]; ==>[ 1, 5 ]
    }
    targetSet.add(sum - arr[i]);
  }
  return false;
}
console.log(hasPairWithSum(array1, 11));

=LinkedList=
// class Node {
//   constructor(value){
//     this.value = value;
//     this.next = null
//   }
// }

class LinkedList {
  constructor(value) {
    this.head = {
      value: value,
      next: null
    };
    // takes same value for each other
    // this head is also the tail
    // &
    this.tail = this.head;
    this.length = 1;
  }
  append(value) {
    const newNode = {
      value: value,
      next: null
    };
    // & with head, referencing
    this.tail.next = newNode;
    // X &. it's new last item
    this.tail = newNode;
    this.length++;
    return this;
  }
  prepend(value) {
    const newNode = {
      value: value,
      next: null
    };
    // &
    newNode.next = this.head;
    this.head = newNode;
    this.length++;
    return this;
  }
  printList() {
    const array = [];
    let currentNode = this.head;
    while (currentNode !== null) {
      array.push(currentNode.value);
      // console.log("before", currentNode);
      currentNode = currentNode.next;
      // console.log("after", currentNode);
    }
    return array;
  }
  insert(index, value) {
    // check params
    if (index >= this.length) {
      return this.append(value);
    }
    const newNode = {
      value: value,
      next: null
    };
    const leader = this.traverseToIndex(index - 1);
    const holdingPointer = leader.next;
    leader.next = newNode;
    newNode.next = holdingPointer;
    this.length++;
    return this.printList;
  }
  traverseToIndex(index) {
    // check params
    let counter = 0;
    let currentNode = this.head;
    while (counter !== index) {
      currentNode = currentNode.next;
      counter++;
    }
    return currentNode;
  }
  remove(index) {
    const leader = this.traverseToIndex(index - 1);
    const unwantedNode = leader.next;
    leader.next = unwantedNode.next;
    this.length--;
    return this;
  }
  reverse() {
    if (!this.head.next) {
      return this.head;
    }
    let first = this.head;
    this.tail = this.head;
    let second = first.next;
    while (second) {
      const temp = second.next;
      second.next = first;
      first = second;
      second = temp;
    }
    this.head.next = null;
    this.head = first;
    return this;
  }
}

const myLinkedList = new LinkedList(10);
myLinkedList.append(5);
myLinkedList.append(16);
myLinkedList.prepend(1);
myLinkedList.insert(2, 99);
myLinkedList.remove(1);
console.log(myLinkedList.printList());
// [ 1, 99, 5, 16 ]

// myLinkedList.insert(2, 99);
console.log(myLinkedList);

=doubly linkedList=
class DoublyLinkedList {
  constructor(value) {
    this.head = {
      value: value,
      next: null,
      prev: null
    };
    // takes same value for each other
    // this head is also the tail
    // &
    this.tail = this.head;
    this.length = 1;
  }
  append(value) {
    const newNode = {
      value: value,
      next: null,
      prev: null
    };
    newNode.prev = this.tail;
    // & with head, referencing
    this.tail.next = newNode;
    // X &. it's new last item
    this.tail = newNode;
    this.length++;
    return this;
  }
  prepend(value) {
    const newNode = {
      value: value,
      next: null,
      prev: null
    };
    // &
    newNode.next = this.head;
    // better reverse?
    this.head.prev = newNode;
    this.head = newNode;
    this.length++;
    return this;
  }
  printList() {
    const array = [];
    let currentNode = this.head;
    while (currentNode !== null) {
      array.push(currentNode.value);
      // console.log("before", currentNode);
      currentNode = currentNode.next;
      // console.log("after", currentNode);
    }
    return array;
  }
  insert(index, value) {
    // check params
    if (index >= this.length) {
      return this.append(value);
    }
    const newNode = {
      value: value,
      next: null,
      prev: null
    };
    const leader = this.traverseToIndex(index - 1);
    const follower = leader.next;
    leader.next = newNode;
    newNode.prev = leader;
    newNode.next = follower;
    follower.prev = newNode;
    this.length++;
    console.log(this);
    return this.printList;
  }
  traverseToIndex(index) {
    // check params
    let counter = 0;
    let currentNode = this.head;
    while (counter !== index) {
      currentNode = currentNode.next;
      counter++;
    }
    return currentNode;
  }
  remove(index) {
    const leader = this.traverseToIndex(index - 1);
    const unwantedNode = leader.next;
    leader.next = unwantedNode.next;
    this.length--;
    return this;
  }
}

const myLinkedList = new DoublyLinkedList(10);
myLinkedList.append(5);
myLinkedList.append(16);
myLinkedList.prepend(1);
myLinkedList.insert(1, 99);
// myLinkedList.remove(1);
console.log(myLinkedList.printList());
// [ 1, 10, 99, 5, 16 ]

// myLinkedList.insert(2, 99);
console.log(myLinkedList);


=queueLinkedList=
class Node {
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}
class Queue {
  constructor() {
    this.first = null;
    this.last = null;
    this.length = 0;
  }
  peek() {
    return this.top;
  }
  enqueue(value) {
    const newNode = new Node(value);
    if (this.length === 0) {
      this.first = newNode;
      this.last = newNode;
    }
    this.last.next = newNode;
    this.last = newNode;
    this.length++;
    return this;
  }
  dequeue() {
    if (!this.first) {
      return null;
    }
    if (this.first === this.last) {
      this.last = null;
    }
    this.first = this.first.next;
    this.length--;
    return this;
  }
}
const myQueue = new Queue();
myQueue.enqueue("Roy");
myQueue.enqueue("Lisa");
myQueue.enqueue("Tom");
myQueue.dequeue();

=stackArray=
class Stack {
  constructor() {
    this.array = [];
  }
  peek() {
    // to see the last element of array
    return this.array[this.array.length - 1];
  }
  push(value) {
    this.array.push(value);
  }
  pop() {
    this.array.pop();
    return this;
  }
}

const myStack = new Stack();
myStack.push("google");
myStack.push("udemy");
myStack.push("discord");
myStack.peek();
myStack.pop();
myStack.peek();

=stackLinedList=
class Node {
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}

class Stack {
  constructor() {
    this.top = null;
    this.bottom = null;
    this.length = 0;
  }
  peek() {
    return this.top;
  }
  push(value) {
    const newNode = new Node(value);
    if (this.length === 0) {
      this.top = newNode;
      this.bottom = newNode;
    } else {
      const holdingPointer = this.top;
      this.top = newNode;
      this.top.next = holdingPointer;
    }
    this.length++;
    return this;
  }
  pop() {
    if (!this.length) {
      return null;
    }
    if (this.top === this.bottom) {
      this.bottom = null;
    }
    this.top = this.top.next;
    this.length--;
    return this;
  }
}

const myStack = new Stack();
myStack.push("google");
myStack.push("udemy");
myStack.push("discord");
myStack.peek();

=LeetCode=
* 1-twoSum *
// Given an array of integers, return indices of the two numbers such that they add up to a specific target.

// You may assume that each input would have exactly one solution, and you may not use the same element twice.

// Example:

// Given nums = [2, 7, 11, 15], target = 9,

// Because nums[0] + nums[1] = 2 + 7 = 9,
// return [0, 1].

var twoSum = function(nums, target) {};

// Answer
// const twoSum = (nums, target) => {
//   const map = {};

//   for (let i = 0; i < nums.length; i++) {
//     const another = target - nums[i];

//     if (another in map) {
//       return [map[another], i];
//     }

//     map[nums[i]] = i;
//   }

//   return null;
// };

* 53-maximumSubarray *
// Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

// Example:

// Input: [-2,1,-3,4,-1,2,1,-5,4],
// Output: 6
// Explanation: [4,-1,2,1] has the largest sum = 6.
// Follow up:

// If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

var maxSubArray = function(nums) {};

// Solution
// function maxSubArray(A) {
//   var prev = 0;
//   var max = -Number.MAX_VALUE;

//   for (var i = 0; i < A.length; i++) {
//     prev = Math.max(prev + A[i], A[i]);
//     max = Math.max(max, prev);
//   }
//   return max;
// }

*53-maximumSubarray*

// Given an array, rotate the array to the right by k steps, where k is non-negative.

// Example 1:

// Input: [1,2,3,4,5,6,7] and k = 3
// Output: [5,6,7,1,2,3,4]
// Explanation:
// rotate 1 steps to the right: [7,1,2,3,4,5,6]
// rotate 2 steps to the right: [6,7,1,2,3,4,5]
// rotate 3 steps to the right: [5,6,7,1,2,3,4]
// Example 2:

// Input: [-1,-100,3,99] and k = 2
// Output: [3,99,-1,-100]
// Explanation:
// rotate 1 steps to the right: [99,-1,-100,3]
// rotate 2 steps to the right: [3,99,-1,-100]
// Note:

// Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
// Could you do it in-place with O(1) extra space?

var rotate = function(nums, k) {};

// Solution
// var rotate = function(nums, k) {
//   let a = [];
//   let len = nums.length;
//   for (let i = 0; i < len; i++) {
//     a[(i + k) % len] = nums[i];
//   }
//   for (let i = 0; i < len; i++) {
//     nums[i] = a[i];
//   }
// };

* 189-rotateArray *
// Given an array, rotate the array to the right by k steps, where k is non-negative.

// Example 1:

// Input: [1,2,3,4,5,6,7] and k = 3
// Output: [5,6,7,1,2,3,4]
// Explanation:
// rotate 1 steps to the right: [7,1,2,3,4,5,6]
// rotate 2 steps to the right: [6,7,1,2,3,4,5]
// rotate 3 steps to the right: [5,6,7,1,2,3,4]
// Example 2:

// Input: [-1,-100,3,99] and k = 2
// Output: [3,99,-1,-100]
// Explanation:
// rotate 1 steps to the right: [99,-1,-100,3]
// rotate 2 steps to the right: [3,99,-1,-100]
// Note:

// Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
// Could you do it in-place with O(1) extra space?

var rotate = function(nums, k) {};

// Solution
// var rotate = function(nums, k) {
//   let a = [];
//   let len = nums.length;
//   for (let i = 0; i < len; i++) {
//     a[(i + k) % len] = nums[i];
//   }
//   for (let i = 0; i < len; i++) {
//     nums[i] = a[i];
//   }
// };

* 217-containsDuplicate *
// Given an array of integers, find if the array contains any duplicates.

// Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.

// Example 1:

// Input: [1,2,3,1]
// Output: true
// Example 2:

// Input: [1,2,3,4]
// Output: false
// Example 3:

// Input: [1,1,1,3,3,4,3,2,4,2]
// Output: true

var containsDuplicate = function(nums) {};

// var containsDuplicate = function(nums) {
//   var hash = {};
//   for (var i = nums.length - 1; i >= 0; i--) {
//     if (hash[nums[i]]) {
//       return true;
//     } else {
//       hash[nums[i]] = 1;
//     }
//   }
//   return false;
// };

* 283-moveZeros *
// Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

// Example:

// Input: [0,1,0,3,12]
// Output: [1,3,12,0,0]
// Note:

// You must do this in-place without making a copy of the array.
// Minimize the total number of operations.

var moveZeroes = function(nums) {};

// Solution
// function moveZeroes(nums) {
//   var idx = 0;
//   for (var i = 0; i < nums.length; i++) {
//     if (nums[i] !== 0) {
//       nums[idx] = nums[i];
//       nums[i] = idx === i ? nums[i] : 0;
//       idx++;
//     }
//   }
// }

/*
232. Implement Queue using Stacks
Easy


push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.
Example:

MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // returns 1
queue.pop();   // returns 1
queue.empty(); // returns false

You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).
*/


/* Answer
var MyQueue = function() {
    this.arr=[];
};
MyQueue.prototype.push = function(x) {
    this.arr.push(x);
};
MyQueue.prototype.pop = function() {
    return this.arr.shift();
};
MyQueue.prototype.peek = function() {
    let m=this.arr.length;
    if(m>0){
        return this.arr[0];
    }
};

MyQueue.prototype.empty = function() {
    return this.arr.length ==0
};
*/

/*
7. Reverse Integer
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/
var reverse = function(x) {
  const strInt = x
    .toString()
    .split("")
    .reverse()
    .join("");

  const revInt = parseInt(strInt) * Math.sign(x);
  return revInt;
};
/*
var reverse = function(x) {
    let ans = x < 0 ? 
        parseInt(Math.abs(x).toString().split('').reverse().join('')) * -1
        :
        parseInt(x.toString().split('').reverse().join(''))
    return Math.abs(ans) < Math.pow(2,31) ? ans : 0;
};
*/

/* 
9. Palindrome Number
Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

Example 1:

Input: 121
Output: true
Example 2:

Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
Follow up:

Coud you solve it without converting the integer to a string?
*/
var isPalindrome = function(x) {};
/* 
var isPalindrome = function(x) {
    if (x < 0 || (x !== 0 && x%10 === 0)) return false;
    let num = x;
    let rev = 0;
    
    while(num) {
      rev = (rev * 10) + (num%10);
      num = Math.floor(num/10);
    }
    return x === rev;
};
OR
var isPalindrome = function(x) {
  if (x === 0) return true;
  if (x < 0 || x % 10 === 0) return false;
  return `${x}` === `${x}`.split('').reverse().join('');
};
var isPalindrome = function(x) {
  if (x === 0) return true;
  if (x < 0 || x % 10 === 0) return false;
  let r = 0;
  const _x = x;
  while (x > 0) {
    r = r * 10 + x % 10;
    x = parseInt(x / 10, 10);
  }
  
  return r === _x;
*/

/*
13. Roman to Integer
oman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.
*/
var romanToInt = function(s) {};
/* 
const romanToInt = s => {
  if (!s || s.length === 0) {
    return 0;
  }

  const map = new Map([['I', 1], ['V', 5], ['X', 10], ['L', 50], ['C', 100], ['D', 500], ['M', 1000]]);

  let i = s.length - 1;
  let result = map.get(s[i]);

  while (i > 0) {
    const curr = map.get(s[i]);
    const prev = map.get(s[i - 1]);

    if (prev >= curr) {
      result += prev;
    } else {
      result -= prev;
    }

    i--;
  }

  return result;
};
*/
/*
20. Valid Parentheses

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true
*/

var isValid = function(s) {};
/*
const isValid = (s) => {
    let stack = []
    let paren = {'{': '}', '(':')', '[':']'}
    
    for(let i = 0; i < s.length; i++) {
        if (s[i] in paren) { 
            stack.push(s[i])
        }
        else { 
            let topValue = stack[stack.length-1]
            if(paren[topValue] === s[i]) {
                stack.pop()
            } else {
                return false
            }  
        }
    }
    if(stack.length !== 0) { 
        return false
    }
        
    return true
};
*/
/*
21. Merge Two Sorted Lists
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4
*/
var mergeTwoLists = function(l1, l2) {};
/* 
var mergeTwoLists = function(l1, l2) {
    let list = new ListNode()
    let head = list
    
    while (l1 !== null && l2 !== null) {
	
		// Select the smallest value from either linked list,
		// then increment that list forward.
        if (l1.val < l2.val) {
            list.next = new ListNode(l1.val)
            l1 = l1.next
        } else {
            list.next = new ListNode(l2.val)
            l2 = l2.next
        }
        
        list = list.next
    }
    
	// It's possible that one linked list is shorter than the other so we just
	// add on the remainder of the last linked list. It's already sorted :)
    if (l1 !== null)
        list.next = l1
    if (l2 !== null)
        list.next = l2
    
	// return .next because this first element in the linkedlist is empty
    return head.next
};
*/
/*
26. Remove Duplicates from Sorted Array
Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.
Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
*/
var removeDuplicates = function(nums) {};
/*
var removeDuplicates = function(nums) {
    let l = r = 0;
    while (r < nums.length){
        nums[l] = nums[r];
        l++, r++;
        while (nums[r] == nums[r - 1]){
            r++;
        }
    }
    return l;
};
*/
/*
27. Remove Element
Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example 1:

Given nums = [3,2,2,3], val = 3,

Your function should return length = 2, with the first two elements of nums being 2.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,1,2,2,3,0,4,2], val = 2,

Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.

Note that the order of those five elements can be arbitrary.

It doesn't matter what values are set beyond the returned length.
Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeElement(nums, val);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
*/
var removeElement = function(nums, val) {};
/* 
var removeElement = function(nums, val) {
    for (let i = nums.length - 1; i >= 0; i--){
        if (nums[i] == val){
            nums.splice(i, 1);
        }
    }
    return nums.length;
};
*/
