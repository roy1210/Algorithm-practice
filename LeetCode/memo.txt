=AlgoIdeas=

function addUpTo(n) {
  let total = 0;
  for (let i = 0; i <= n; i++) {
    total += i;
  }
  return total;
  // return n * (n+1) / 2
}

console.log(addUpTo(5));

=AlgorismTopics=
# Array #
* BigPicture *
const strings = ["a", "b", "c", "d"];
// Lookup O(1)
// Delete O(n)
strings.pop(); //delete last item of array

// Insert O(n)
strings.unshift("x"); // O(n) Add 'x' in beginnings of array and shift all item's index #

// Push O(1) like .append
// .splice(i#, deleteQty, insertString); O(n)
strings.splice(2, 0, "x"); // [ 'a', 'b', 'x', 'c', 'd' ]

console.log(strings);

* mergeStoredArrays *
function mergeSortedArrays(array1, array2) {
  const mergedArray = [];
  let array1Item = array1[0];
  let array2Item = array2[0];
  let i = 1;
  let j = 1;

  if (array1.length === 0) {
    return array2;
  }
  if (array2.length === 0) {
    return array1;
  }

  while (array1Item || array2Item) {
    // !array2Item: 31 will go in
    if (!array2Item || array1Item < array2Item) {
      mergedArray.push(array1Item);
      array1Item = array1[i];
      i++;
    } else {
      mergedArray.push(array2Item);
      array2Item = array2[j];
      j++;
    }
  }
  return mergedArray;
}
console.log(mergeSortedArrays([0, 3, 4, 31], [4, 6, 30]));
// [0, 3, 4, 4 ,6, 30, 31]

function mergeSortedArrays2(array1, array2) {
  let retArray = [];
  const sortedArray = [];

  if (array1.length === 0) {
    return array2;
  }
  if (array2.length === 0) {
    return array1;
  }

  for (num of array1) {
    retArray.push(num);
  }
  for (num of array2) {
    retArray.push(num);
  }

  return retArray.sort("number");
}
// console.log(mergeSortedArrays([0, 3, 4, 31], [4, 6, 30]));
// [0, 3, 4, 4 ,6, 30, 31]

* myArrayClass *
// method: Function in class. ex: myArray.pop()

class MyArray {
  constructor() {
    this.length = 0;
    this.data = {};
  }
  get(index) {
    return this.data[index];
  }
  push(item) {
    // Add new item in the end of index
    this.data[this.length] = item;
    this.length++;
    return this.length;
  }
  pop() {
    const lastItem = this.data[this.length - 1];
    delete this.data[this.length - 1];
    this.length--;
    return lastItem;
  }
  delete(index) {
    const item = this.data[index];
    this.shiftItems(index);
    return item;
  }
  shiftItems(index) {
    for (let i = index; i < this.length - 1; i++) {
      this.data[i] = this.data[i + 1];
    }
    delete this.data[this.length - 1];
    this.length--;
  }
}

const newArray = new MyArray();
newArray.push("hi");
newArray.push("you");
newArray.push("!!");
// newArray.pop();
// newArray.pop();
newArray.delete(0);
newArray.push("are");
newArray.push("nice");
newArray.delete(1);
console.log(newArray);

* returnString *
function reverse(str) {
  // Error checking
  if (!str || str.length < 2 || typeof str !== "string") {
    return "Please type strings";
  }

  const revString = str
    .split("")
    .reverse()
    .join("");
  return revString;
}

function reverse2(str) {
  const strings = str.split("");
  let revString = "";

  for (let char of strings) {
    revString = char + revString;
  }

  return revString;
}

function reverse3(str) {
  const backWords = [];
  const totalItems = str.length - 1;
  for (let i = totalItems; i >= 0; i--) {
    backWords.push(str[i]);
  }
  return backWords.join("");
}

console.log(reverse("Hi My name is Roy"));
console.log("Error:", reverse(123));
console.log(reverse2("Hi My name is Roy"));
console.log(reverse3("Hi My name is NYAN"));

// for ( let i in array) -> i = index#
// for (let c of array) -> c = char

// for (let char in strings) {
//   revString = strings[char] + revString;
// }

=HashTables=

* containsCommonItem *
// Give 2 arrays
// check if there is same value
// return true / false

// array1 ===> obj{
//   a: true,
//   b: true,
//   c: true
// }

const array1 = ["a", "b", "c", "x"];
const array2 = ["d", "b", "z"];

function containsCommonItem(array1, array2) {
  let map = {};
  for (let char of array1) {
    if (!map[char]) {
      map[char] = true;
    }
  }
  for (let char of array2) {
    if (map[char] === true) {
      return true;
    }
  }
  return false;
}

function findSameWord2(array1, array2) {
  for (let i in array1) {
    for (let j in array2) {
      if (array1[i] === array2[j]) {
        return true;
      }
    }
  }
  return false;
}

console.log(containsCommonItem(array1, array2));
// console.log(findSameWord2(array1, array2));

*hasPairWithSum*
const array1 = [6, 4, 3, 2, 1, 7];

function hasPairWithSum(arr, sum) {
  // make object to use `has`
  const targetSet = new Set();

  for (let i = 0; i < arr.length; i++) {
    if (targetSet.has(arr[i])) {
      console.log(targetSet);
      return true;
      // return [arr.indexOf(sum - arr[i]), i]; ==>[ 1, 5 ]
    }
    targetSet.add(sum - arr[i]);
  }
  return false;
}
console.log(hasPairWithSum(array1, 11));


=LeetCode=
* 1-twoSum *
// Given an array of integers, return indices of the two numbers such that they add up to a specific target.

// You may assume that each input would have exactly one solution, and you may not use the same element twice.

// Example:

// Given nums = [2, 7, 11, 15], target = 9,

// Because nums[0] + nums[1] = 2 + 7 = 9,
// return [0, 1].

var twoSum = function(nums, target) {};

// Answer
// const twoSum = (nums, target) => {
//   const map = {};

//   for (let i = 0; i < nums.length; i++) {
//     const another = target - nums[i];

//     if (another in map) {
//       return [map[another], i];
//     }

//     map[nums[i]] = i;
//   }

//   return null;
// };

* 53-maximumSubarray *
// Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

// Example:

// Input: [-2,1,-3,4,-1,2,1,-5,4],
// Output: 6
// Explanation: [4,-1,2,1] has the largest sum = 6.
// Follow up:

// If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

var maxSubArray = function(nums) {};

// Solution
// function maxSubArray(A) {
//   var prev = 0;
//   var max = -Number.MAX_VALUE;

//   for (var i = 0; i < A.length; i++) {
//     prev = Math.max(prev + A[i], A[i]);
//     max = Math.max(max, prev);
//   }
//   return max;
// }

*53-maximumSubarray*

// Given an array, rotate the array to the right by k steps, where k is non-negative.

// Example 1:

// Input: [1,2,3,4,5,6,7] and k = 3
// Output: [5,6,7,1,2,3,4]
// Explanation:
// rotate 1 steps to the right: [7,1,2,3,4,5,6]
// rotate 2 steps to the right: [6,7,1,2,3,4,5]
// rotate 3 steps to the right: [5,6,7,1,2,3,4]
// Example 2:

// Input: [-1,-100,3,99] and k = 2
// Output: [3,99,-1,-100]
// Explanation:
// rotate 1 steps to the right: [99,-1,-100,3]
// rotate 2 steps to the right: [3,99,-1,-100]
// Note:

// Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
// Could you do it in-place with O(1) extra space?

var rotate = function(nums, k) {};

// Solution
// var rotate = function(nums, k) {
//   let a = [];
//   let len = nums.length;
//   for (let i = 0; i < len; i++) {
//     a[(i + k) % len] = nums[i];
//   }
//   for (let i = 0; i < len; i++) {
//     nums[i] = a[i];
//   }
// };

* 189-rotateArray *
// Given an array, rotate the array to the right by k steps, where k is non-negative.

// Example 1:

// Input: [1,2,3,4,5,6,7] and k = 3
// Output: [5,6,7,1,2,3,4]
// Explanation:
// rotate 1 steps to the right: [7,1,2,3,4,5,6]
// rotate 2 steps to the right: [6,7,1,2,3,4,5]
// rotate 3 steps to the right: [5,6,7,1,2,3,4]
// Example 2:

// Input: [-1,-100,3,99] and k = 2
// Output: [3,99,-1,-100]
// Explanation:
// rotate 1 steps to the right: [99,-1,-100,3]
// rotate 2 steps to the right: [3,99,-1,-100]
// Note:

// Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
// Could you do it in-place with O(1) extra space?

var rotate = function(nums, k) {};

// Solution
// var rotate = function(nums, k) {
//   let a = [];
//   let len = nums.length;
//   for (let i = 0; i < len; i++) {
//     a[(i + k) % len] = nums[i];
//   }
//   for (let i = 0; i < len; i++) {
//     nums[i] = a[i];
//   }
// };

* 217-containsDuplicate *
// Given an array of integers, find if the array contains any duplicates.

// Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.

// Example 1:

// Input: [1,2,3,1]
// Output: true
// Example 2:

// Input: [1,2,3,4]
// Output: false
// Example 3:

// Input: [1,1,1,3,3,4,3,2,4,2]
// Output: true

var containsDuplicate = function(nums) {};

// var containsDuplicate = function(nums) {
//   var hash = {};
//   for (var i = nums.length - 1; i >= 0; i--) {
//     if (hash[nums[i]]) {
//       return true;
//     } else {
//       hash[nums[i]] = 1;
//     }
//   }
//   return false;
// };

* 283-moveZeros *
// Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

// Example:

// Input: [0,1,0,3,12]
// Output: [1,3,12,0,0]
// Note:

// You must do this in-place without making a copy of the array.
// Minimize the total number of operations.

var moveZeroes = function(nums) {};

// Solution
// function moveZeroes(nums) {
//   var idx = 0;
//   for (var i = 0; i < nums.length; i++) {
//     if (nums[i] !== 0) {
//       nums[idx] = nums[i];
//       nums[i] = idx === i ? nums[i] : 0;
//       idx++;
//     }
//   }
// }
